{"version":3,"names":["_Colors","require","_core","_jsReanimated","_PlatformChecker","colorProps","exports","ColorProperties","isConfigured","makeShareable","updatePropsByPlatform","shouldBeUseWeb","_","updates","maybeViewRef","items","forEach","item","_updatePropsJS","global","_IS_FABRIC","viewDescriptors","key","indexOf","processColor","value","viewDescriptor","_updatePropsFabric","shadowNodeWrapper","_updatePropsPaper","tag","name","updateProps","updatePropsJestWrapper","animatedStyle","adapters","adapter","current","_default","default"],"sources":["UpdateProps.ts"],"sourcesContent":["/* global _updatePropsPaper _updatePropsFabric */\nimport { MutableRefObject } from 'react';\nimport { processColor } from './Colors';\nimport { AnimatedStyle, SharedValue, StyleProps } from './commonTypes';\nimport { makeShareable, isConfigured } from './core';\nimport { Descriptor } from './hook/commonTypes';\nimport { _updatePropsJS } from './js-reanimated';\nimport { shouldBeUseWeb } from './PlatformChecker';\nimport { ViewRefSet } from './ViewDescriptorsSet';\n\n// copied from react-native/Libraries/Components/View/ReactNativeStyleAttributes\nexport const colorProps = [\n  'backgroundColor',\n  'borderBottomColor',\n  'borderColor',\n  'borderLeftColor',\n  'borderRightColor',\n  'borderTopColor',\n  'borderStartColor',\n  'borderEndColor',\n  'color',\n  'shadowColor',\n  'textDecorationColor',\n  'tintColor',\n  'textShadowColor',\n  'overlayColor',\n];\n\nexport const ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);\n\nlet updatePropsByPlatform;\nif (shouldBeUseWeb()) {\n  updatePropsByPlatform = (\n    _: SharedValue<Descriptor[]>,\n    updates: StyleProps | AnimatedStyle,\n    maybeViewRef: ViewRefSet<any> | undefined\n  ): void => {\n    'worklet';\n    if (maybeViewRef) {\n      maybeViewRef.items.forEach((item, _) => {\n        _updatePropsJS(updates, item);\n      });\n    }\n  };\n} else {\n  if (global._IS_FABRIC) {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsFabric!(viewDescriptor.shadowNodeWrapper, updates);\n      });\n    };\n  } else {\n    updatePropsByPlatform = (\n      viewDescriptors: SharedValue<Descriptor[]>,\n      updates: StyleProps | AnimatedStyle,\n      _: ViewRefSet<any> | undefined\n    ): void => {\n      'worklet';\n\n      for (const key in updates) {\n        if (ColorProperties.indexOf(key) !== -1) {\n          updates[key] = processColor(updates[key]);\n        }\n      }\n      viewDescriptors.value.forEach((viewDescriptor) => {\n        _updatePropsPaper!(\n          viewDescriptor.tag,\n          viewDescriptor.name || 'RCTView',\n          updates\n        );\n      });\n    };\n  }\n}\n\nexport const updateProps: (\n  viewDescriptor: SharedValue<Descriptor[]>,\n  updates: StyleProps | AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined\n) => void = updatePropsByPlatform;\n\nexport const updatePropsJestWrapper = (\n  viewDescriptors: SharedValue<Descriptor[]>,\n  updates: AnimatedStyle,\n  maybeViewRef: ViewRefSet<any> | undefined,\n  animatedStyle: MutableRefObject<AnimatedStyle>,\n  adapters: ((updates: AnimatedStyle) => void)[]\n): void => {\n  adapters.forEach((adapter) => {\n    adapter(updates);\n  });\n  animatedStyle.current.value = {\n    ...animatedStyle.current.value,\n    ...updates,\n  };\n\n  updateProps(viewDescriptors, updates, maybeViewRef);\n};\n\nexport default updateProps;\n"],"mappings":"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"}