{"version":3,"names":["_Colors","require","_core","_interpolation","_useSharedValue","Extrapolate","EXTEND","CLAMP","IDENTITY","exports","interpolateColorsHSV","value","inputRange","colors","options","h","useCorrectedHSVInterpolation","correctedInputRange","originalH","correctedH","i","length","d","push","interpolate","s","v","a","hsvToColor","toLinearSpace","x","gamma","map","Math","pow","toGammaSpace","round","interpolateColorsRGB","r","outputR","g","outputG","b","outputB","rgbaColor","getInterpolateRGB","color","processedColor","processColor","undefined","red","green","blue","opacity","getInterpolateHSV","processedHSVColor","RGBtoHSV","interpolateColor","outputRange","colorSpace","arguments","Error","ColorSpace","useInterpolateConfig","RGB","useSharedValue","cache","makeMutable","interpolateSharableColor","interpolateConfig","HSV"],"sources":["interpolateColor.ts"],"sourcesContent":["import {\n  hsvToColor,\n  RGBtoHSV,\n  rgbaColor,\n  processColor,\n  red,\n  green,\n  blue,\n  opacity,\n} from './Colors';\nimport { makeMutable } from './core';\nimport { interpolate } from './interpolation';\nimport { SharedValue } from './commonTypes';\nimport { useSharedValue } from './hook/useSharedValue';\n\nexport const Extrapolate = {\n  EXTEND: 'extend',\n  CLAMP: 'clamp',\n  IDENTITY: 'identity',\n};\n\nexport type InterpolationOptions = {\n  gamma?: number;\n  useCorrectedHSVInterpolation?: boolean;\n};\n\nconst interpolateColorsHSV = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateHSV,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  let h = 0;\n  const { useCorrectedHSVInterpolation = true } = options;\n  if (useCorrectedHSVInterpolation) {\n    // if the difference between hues in a range is > 180 deg\n    // then move the hue at the right end of the range +/- 360 deg\n    // and add the next point in the original place + 0.00001 with original hue\n    // to not break the next range\n    const correctedInputRange = [inputRange[0]];\n    const originalH = colors.h;\n    const correctedH = [originalH[0]];\n\n    for (let i = 1; i < originalH.length; ++i) {\n      const d = originalH[i] - originalH[i - 1];\n      if (originalH[i] > originalH[i - 1] && d > 0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] - 1);\n        correctedH.push(originalH[i]);\n      } else if (originalH[i] < originalH[i - 1] && d < -0.5) {\n        correctedInputRange.push(inputRange[i]);\n        correctedInputRange.push(inputRange[i] + 0.00001);\n        correctedH.push(originalH[i] + 1);\n        correctedH.push(originalH[i]);\n      } else {\n        correctedInputRange.push(inputRange[i]);\n        correctedH.push(originalH[i]);\n      }\n    }\n    h =\n      (interpolate(value, correctedInputRange, correctedH, Extrapolate.CLAMP) +\n        1) %\n      1;\n  } else {\n    h = interpolate(value, inputRange, colors.h, Extrapolate.CLAMP);\n  }\n  const s = interpolate(value, inputRange, colors.s, Extrapolate.CLAMP);\n  const v = interpolate(value, inputRange, colors.v, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  return hsvToColor(h, s, v, a);\n};\n\nconst toLinearSpace = (x: number[], gamma: number): number[] => {\n  'worklet';\n  return x.map((v) => Math.pow(v / 255, gamma));\n};\n\nconst toGammaSpace = (x: number, gamma: number): number => {\n  'worklet';\n  return Math.round(Math.pow(x, 1 / gamma) * 255);\n};\n\nconst interpolateColorsRGB = (\n  value: number,\n  inputRange: readonly number[],\n  colors: InterpolateRGB,\n  options: InterpolationOptions\n) => {\n  'worklet';\n  const { gamma = 2.2 } = options;\n  let { r: outputR, g: outputG, b: outputB } = colors;\n  if (gamma !== 1) {\n    outputR = toLinearSpace(outputR, gamma);\n    outputG = toLinearSpace(outputG, gamma);\n    outputB = toLinearSpace(outputB, gamma);\n  }\n  const r = interpolate(value, inputRange, outputR, Extrapolate.CLAMP);\n  const g = interpolate(value, inputRange, outputG, Extrapolate.CLAMP);\n  const b = interpolate(value, inputRange, outputB, Extrapolate.CLAMP);\n  const a = interpolate(value, inputRange, colors.a, Extrapolate.CLAMP);\n  if (gamma === 1) {\n    return rgbaColor(r, g, b, a);\n  }\n  return rgbaColor(\n    toGammaSpace(r, gamma),\n    toGammaSpace(g, gamma),\n    toGammaSpace(b, gamma),\n    a\n  );\n};\n\ninterface InterpolateRGB {\n  r: number[];\n  g: number[];\n  b: number[];\n  a: number[];\n}\n\nconst getInterpolateRGB = (\n  colors: readonly (string | number)[]\n): InterpolateRGB => {\n  'worklet';\n\n  const r = [];\n  const g = [];\n  const b = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color);\n    // explicit check in case if processedColor is 0\n    if (processedColor !== null && processedColor !== undefined) {\n      r.push(red(processedColor));\n      g.push(green(processedColor));\n      b.push(blue(processedColor));\n      a.push(opacity(processedColor));\n    }\n  }\n  return { r, g, b, a };\n};\n\ninterface InterpolateHSV {\n  h: number[];\n  s: number[];\n  v: number[];\n  a: number[];\n}\n\nconst getInterpolateHSV = (\n  colors: readonly (string | number)[]\n): InterpolateHSV => {\n  'worklet';\n  const h = [];\n  const s = [];\n  const v = [];\n  const a = [];\n  for (let i = 0; i < colors.length; ++i) {\n    const color = colors[i];\n    const processedColor = processColor(color) as any;\n    if (typeof processedColor === 'number') {\n      const processedHSVColor = RGBtoHSV(\n        red(processedColor),\n        green(processedColor),\n        blue(processedColor)\n      );\n\n      h.push(processedHSVColor.h);\n      s.push(processedHSVColor.s);\n      v.push(processedHSVColor.v);\n      a.push(opacity(processedColor));\n    }\n  }\n  return { h, s, v, a };\n};\n\nexport const interpolateColor = (\n  value: number,\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace: 'RGB' | 'HSV' = 'RGB',\n  options: InterpolationOptions = {}\n): string | number => {\n  'worklet';\n  if (colorSpace === 'HSV') {\n    return interpolateColorsHSV(\n      value,\n      inputRange,\n      getInterpolateHSV(outputRange),\n      options\n    );\n  } else if (colorSpace === 'RGB') {\n    return interpolateColorsRGB(\n      value,\n      inputRange,\n      getInterpolateRGB(outputRange),\n      options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n\nexport enum ColorSpace {\n  RGB = 0,\n  HSV = 1,\n}\n\nexport interface InterpolateConfig {\n  inputRange: readonly number[];\n  outputRange: readonly (string | number)[];\n  colorSpace: ColorSpace;\n  cache: SharedValue<InterpolateRGB | InterpolateHSV | null>;\n  options: InterpolationOptions;\n}\n\nexport function useInterpolateConfig(\n  inputRange: readonly number[],\n  outputRange: readonly (string | number)[],\n  colorSpace = ColorSpace.RGB,\n  options: InterpolationOptions = {}\n): SharedValue<InterpolateConfig> {\n  return useSharedValue<InterpolateConfig>({\n    inputRange,\n    outputRange,\n    colorSpace,\n    cache: makeMutable<InterpolateRGB | InterpolateHSV | null>(null),\n    options,\n  });\n}\n\nexport const interpolateSharableColor = (\n  value: number,\n  interpolateConfig: SharedValue<InterpolateConfig>\n): string | number => {\n  'worklet';\n  let colors = interpolateConfig.value.cache.value;\n  if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {\n    if (!colors) {\n      colors = getInterpolateRGB(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsRGB(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateRGB,\n      interpolateConfig.value.options\n    );\n  } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {\n    if (!colors) {\n      colors = getInterpolateHSV(interpolateConfig.value.outputRange);\n      interpolateConfig.value.cache.value = colors;\n    }\n    return interpolateColorsHSV(\n      value,\n      interpolateConfig.value.inputRange,\n      colors as InterpolateHSV,\n      interpolateConfig.value.options\n    );\n  }\n  throw new Error(\n    `Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`\n  );\n};\n"],"mappings":"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"}